From 4a9d7b4c2f769ec39ee97eb48e52e8d218ab105a Mon Sep 17 00:00:00 2001
From: Tiago Vignatti <tiago.vignatti@intel.com>
Date: Tue, 4 Jun 2013 16:55:11 -0300
Subject: [PATCH 04/19] ui/base: Add wayland event construction and
 translating utility function.

Signed-off-by: Tiago Vignatti <tiago.vignatti@intel.com>
---
 .../keycodes/keyboard_code_conversion_wayland.cc   |  348 ++++++++++++++++++++
 .../keycodes/keyboard_code_conversion_wayland.h    |   27 ++
 ui/base/wayland/events_wayland.cc                  |  219 ++++++++++++
 ui/ui.gyp                                          |    1 +
 4 files changed, 595 insertions(+)
 create mode 100644 ui/base/keycodes/keyboard_code_conversion_wayland.cc
 create mode 100644 ui/base/keycodes/keyboard_code_conversion_wayland.h
 create mode 100644 ui/base/wayland/events_wayland.cc

diff --git a/ui/base/keycodes/keyboard_code_conversion_wayland.cc b/ui/base/keycodes/keyboard_code_conversion_wayland.cc
new file mode 100644
index 0000000..500e167
--- /dev/null
+++ b/ui/base/keycodes/keyboard_code_conversion_wayland.cc
@@ -0,0 +1,348 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/keycodes/keyboard_code_conversion_wayland.h"
+
+#include <X11/keysym.h>
+
+#include "base/basictypes.h"
+#include "base/logging.h"
+#include "base/stringprintf.h"
+#include "base/wayland/wayland_event.h"
+
+namespace ui {
+
+uint16 GetCharacterFromWaylandEvent(base::wayland::WaylandEvent* wev)
+{
+  if(wev->key.sym < 256)
+    return wev->key.sym;
+  return 0;
+  /*
+  char buf[6];
+  int bytes_written = XLookupString(&wev->key.key, buf, 6, NULL, NULL);
+  DCHECK_LE(bytes_written, 6);
+
+  string16 result;
+  return (bytes_written > 0 && UTF8ToUTF16(buf, bytes_written, &result) &&
+          result.length() == 1) ? result[0] : 0;
+	*/
+}
+
+KeyboardCode KeyboardCodeFromXKeysym(unsigned int keysym) {
+  // TODO(sad): Have |keysym| go through the X map list?
+
+  switch (keysym) {
+    case XK_BackSpace:
+      return VKEY_BACK;
+    case XK_Delete:
+    case XK_KP_Delete:
+      return VKEY_DELETE;
+    case XK_Tab:
+    case XK_KP_Tab:
+    case XK_ISO_Left_Tab:
+      return VKEY_TAB;
+    case XK_Linefeed:
+    case XK_Return:
+    case XK_KP_Enter:
+    case XK_ISO_Enter:
+      return VKEY_RETURN;
+    case XK_Clear:
+    case XK_KP_Begin:  // NumPad 5 without Num Lock, for crosbug.com/29169.
+      return VKEY_CLEAR;
+    case XK_KP_Space:
+    case XK_space:
+      return VKEY_SPACE;
+    case XK_Home:
+    case XK_KP_Home:
+      return VKEY_HOME;
+    case XK_End:
+    case XK_KP_End:
+      return VKEY_END;
+    case XK_Page_Up:
+    case XK_KP_Page_Up:  // aka XK_KP_Prior
+      return VKEY_PRIOR;
+    case XK_Page_Down:
+    case XK_KP_Page_Down:  // aka XK_KP_Next
+      return VKEY_NEXT;
+    case XK_Left:
+    case XK_KP_Left:
+      return VKEY_LEFT;
+    case XK_Right:
+    case XK_KP_Right:
+      return VKEY_RIGHT;
+    case XK_Down:
+    case XK_KP_Down:
+      return VKEY_DOWN;
+    case XK_Up:
+    case XK_KP_Up:
+      return VKEY_UP;
+    case XK_Escape:
+      return VKEY_ESCAPE;
+    case XK_Kana_Lock:
+    case XK_Kana_Shift:
+      return VKEY_KANA;
+    case XK_Hangul:
+      return VKEY_HANGUL;
+    case XK_Hangul_Hanja:
+      return VKEY_HANJA;
+    case XK_Kanji:
+      return VKEY_KANJI;
+    case XK_Henkan:
+      return VKEY_CONVERT;
+    case XK_Muhenkan:
+      return VKEY_NONCONVERT;
+    case XK_Zenkaku_Hankaku:
+      return VKEY_DBE_DBCSCHAR;
+    case XK_A:
+    case XK_a:
+      return VKEY_A;
+    case XK_B:
+    case XK_b:
+      return VKEY_B;
+    case XK_C:
+    case XK_c:
+      return VKEY_C;
+    case XK_D:
+    case XK_d:
+      return VKEY_D;
+    case XK_E:
+    case XK_e:
+      return VKEY_E;
+    case XK_F:
+    case XK_f:
+      return VKEY_F;
+    case XK_G:
+    case XK_g:
+      return VKEY_G;
+    case XK_H:
+    case XK_h:
+      return VKEY_H;
+    case XK_I:
+    case XK_i:
+      return VKEY_I;
+    case XK_J:
+    case XK_j:
+      return VKEY_J;
+    case XK_K:
+    case XK_k:
+      return VKEY_K;
+    case XK_L:
+    case XK_l:
+      return VKEY_L;
+    case XK_M:
+    case XK_m:
+      return VKEY_M;
+    case XK_N:
+    case XK_n:
+      return VKEY_N;
+    case XK_O:
+    case XK_o:
+      return VKEY_O;
+    case XK_P:
+    case XK_p:
+      return VKEY_P;
+    case XK_Q:
+    case XK_q:
+      return VKEY_Q;
+    case XK_R:
+    case XK_r:
+      return VKEY_R;
+    case XK_S:
+    case XK_s:
+      return VKEY_S;
+    case XK_T:
+    case XK_t:
+      return VKEY_T;
+    case XK_U:
+    case XK_u:
+      return VKEY_U;
+    case XK_V:
+    case XK_v:
+      return VKEY_V;
+    case XK_W:
+    case XK_w:
+      return VKEY_W;
+    case XK_X:
+    case XK_x:
+      return VKEY_X;
+    case XK_Y:
+    case XK_y:
+      return VKEY_Y;
+    case XK_Z:
+    case XK_z:
+      return VKEY_Z;
+
+    case XK_0:
+    case XK_1:
+    case XK_2:
+    case XK_3:
+    case XK_4:
+    case XK_5:
+    case XK_6:
+    case XK_7:
+    case XK_8:
+    case XK_9:
+      return static_cast<KeyboardCode>(VKEY_0 + (keysym - XK_0));
+
+    case XK_parenright:
+      return VKEY_0;
+    case XK_exclam:
+      return VKEY_1;
+    case XK_at:
+      return VKEY_2;
+    case XK_numbersign:
+      return VKEY_3;
+    case XK_dollar:
+      return VKEY_4;
+    case XK_percent:
+      return VKEY_5;
+    case XK_asciicircum:
+      return VKEY_6;
+    case XK_ampersand:
+      return VKEY_7;
+    case XK_asterisk:
+      return VKEY_8;
+    case XK_parenleft:
+      return VKEY_9;
+
+    case XK_KP_0:
+    case XK_KP_1:
+    case XK_KP_2:
+    case XK_KP_3:
+    case XK_KP_4:
+    case XK_KP_5:
+    case XK_KP_6:
+    case XK_KP_7:
+    case XK_KP_8:
+    case XK_KP_9:
+      return static_cast<KeyboardCode>(VKEY_NUMPAD0 + (keysym - XK_KP_0));
+
+    case XK_multiply:
+    case XK_KP_Multiply:
+      return VKEY_MULTIPLY;
+    case XK_KP_Add:
+      return VKEY_ADD;
+    case XK_KP_Separator:
+      return VKEY_SEPARATOR;
+    case XK_KP_Subtract:
+      return VKEY_SUBTRACT;
+    case XK_KP_Decimal:
+      return VKEY_DECIMAL;
+    case XK_KP_Divide:
+      return VKEY_DIVIDE;
+    case XK_KP_Equal:
+    case XK_equal:
+    case XK_plus:
+      return VKEY_OEM_PLUS;
+    case XK_comma:
+    case XK_less:
+      return VKEY_OEM_COMMA;
+    case XK_minus:
+    case XK_underscore:
+      return VKEY_OEM_MINUS;
+    case XK_greater:
+    case XK_period:
+      return VKEY_OEM_PERIOD;
+    case XK_colon:
+    case XK_semicolon:
+      return VKEY_OEM_1;
+    case XK_question:
+    case XK_slash:
+      return VKEY_OEM_2;
+    case XK_asciitilde:
+    case XK_quoteleft:
+      return VKEY_OEM_3;
+    case XK_bracketleft:
+    case XK_braceleft:
+      return VKEY_OEM_4;
+    case XK_backslash:
+    case XK_bar:
+      return VKEY_OEM_5;
+    case XK_bracketright:
+    case XK_braceright:
+      return VKEY_OEM_6;
+    case XK_quoteright:
+    case XK_quotedbl:
+      return VKEY_OEM_7;
+    case XK_Shift_L:
+    case XK_Shift_R:
+      return VKEY_SHIFT;
+    case XK_Control_L:
+    case XK_Control_R:
+      return VKEY_CONTROL;
+    case XK_Meta_L:
+    case XK_Meta_R:
+    case XK_Alt_L:
+    case XK_Alt_R:
+      return VKEY_MENU;
+    case XK_Pause:
+      return VKEY_PAUSE;
+    case XK_Caps_Lock:
+      return VKEY_CAPITAL;
+    case XK_Num_Lock:
+      return VKEY_NUMLOCK;
+    case XK_Scroll_Lock:
+      return VKEY_SCROLL;
+    case XK_Select:
+      return VKEY_SELECT;
+    case XK_Print:
+      return VKEY_PRINT;
+    case XK_Execute:
+      return VKEY_EXECUTE;
+    case XK_Insert:
+    case XK_KP_Insert:
+      return VKEY_INSERT;
+    case XK_Help:
+      return VKEY_HELP;
+    case XK_Super_L:
+      return VKEY_LWIN;
+    case XK_Super_R:
+      return VKEY_RWIN;
+    case XK_Menu:
+      return VKEY_APPS;
+    case XK_F1:
+    case XK_F2:
+    case XK_F3:
+    case XK_F4:
+    case XK_F5:
+    case XK_F6:
+    case XK_F7:
+    case XK_F8:
+    case XK_F9:
+    case XK_F10:
+    case XK_F11:
+    case XK_F12:
+    case XK_F13:
+    case XK_F14:
+    case XK_F15:
+    case XK_F16:
+    case XK_F17:
+    case XK_F18:
+    case XK_F19:
+    case XK_F20:
+    case XK_F21:
+    case XK_F22:
+    case XK_F23:
+    case XK_F24:
+      return static_cast<KeyboardCode>(VKEY_F1 + (keysym - XK_F1));
+    case XK_KP_F1:
+    case XK_KP_F2:
+    case XK_KP_F3:
+    case XK_KP_F4:
+      return static_cast<KeyboardCode>(VKEY_F1 + (keysym - XK_KP_F1));
+
+    case XK_guillemotleft:
+    case XK_guillemotright:
+    case XK_degree:
+    // In the case of canadian multilingual keyboard layout, VKEY_OEM_102 is
+    // assigned to ugrave key.
+    case XK_ugrave:
+    case XK_Ugrave:
+      return VKEY_OEM_102;  // international backslash key in 102 keyboard.
+  }
+  DLOG(WARNING) << "Unknown keysym: " << base::StringPrintf("0x%x", keysym);
+  return VKEY_UNKNOWN;
+}
+
+}  // namespace ui
diff --git a/ui/base/keycodes/keyboard_code_conversion_wayland.h b/ui/base/keycodes/keyboard_code_conversion_wayland.h
new file mode 100644
index 0000000..2cf5d9c
--- /dev/null
+++ b/ui/base/keycodes/keyboard_code_conversion_wayland.h
@@ -0,0 +1,27 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_BASE_KEYCODES_KEYBOARD_CODE_CONVERSION_WAYLAND_H_
+#define UI_BASE_KEYCODES_KEYBOARD_CODE_CONVERSION_WAYLAND_H_
+
+#include "base/basictypes.h"
+#include "ui/base/keycodes/keyboard_codes_posix.h"
+#include "ui/base/ui_export.h"
+
+namespace base {
+namespace wayland {
+union WaylandEvent;
+}
+}
+
+namespace ui {
+
+// Returns a character on a standard US PC keyboard from an XEvent.
+UI_EXPORT uint16 GetCharacterFromWaylandEvent(base::wayland::WaylandEvent* wev);
+
+UI_EXPORT KeyboardCode KeyboardCodeFromXKeysym(unsigned int keysym);
+
+}  // namespace ui
+
+#endif  // UI_BASE_KEYCODES_KEYBOARD_CODE_CONVERSION_WAYLAND_H_
diff --git a/ui/base/wayland/events_wayland.cc b/ui/base/wayland/events_wayland.cc
new file mode 100644
index 0000000..7e5ef9e
--- /dev/null
+++ b/ui/base/wayland/events_wayland.cc
@@ -0,0 +1,219 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/events/event.h"
+#include "ui/base/events/event_constants.h"
+
+#include <linux/input.h>
+#include <X11/extensions/XInput2.h>
+
+#include "base/event_types.h"
+#include "base/logging.h"
+#include "base/time.h"
+#include "ui/base/keycodes/keyboard_code_conversion_x.h"
+#include "ui/gfx/point.h"
+#include "base/wayland/wayland_event.h"
+
+using namespace base::wayland;
+
+namespace ui {
+
+// These are the mouse events expected. The event type Wayland sends is an
+// evdev event. The following is the correct mapping from evdev to expected
+// events type.
+enum WaylandEventButtonType {
+  LEFT_BUTTON     = BTN_LEFT,
+  MIDDLE_BUTTON   = BTN_RIGHT,
+  RIGHT_BUTTON    = BTN_MIDDLE,
+  SCROLL_UP       = 4,
+  SCROLL_DOWN     = 5,
+};
+
+} // namespace ui
+
+namespace {
+
+// Scroll amount for each wheelscroll event. 53 is also the value used for GTK+.
+static int kWheelScrollAmount = 53;
+
+int GetEventFlagsFromState(unsigned int state) {
+  int flags = 0;
+  if (state & ControlMask)
+    flags |= ui::EF_CONTROL_DOWN;
+  if (state & ShiftMask)
+    flags |= ui::EF_SHIFT_DOWN;
+  if (state & Mod1Mask)
+    flags |= ui::EF_ALT_DOWN;
+  if (state & LockMask)
+    flags |= ui::EF_CAPS_LOCK_DOWN;
+  if (state & Button1Mask)
+    flags |= ui::EF_LEFT_MOUSE_BUTTON;
+  if (state & Button2Mask)
+    flags |= ui::EF_MIDDLE_MOUSE_BUTTON;
+  if (state & Button3Mask)
+    flags |= ui::EF_RIGHT_MOUSE_BUTTON;
+
+  return flags;
+}
+
+int GetButtonEventFlagsFromNativeEvent(const base::NativeEvent& native_event) {
+  // TODO(dnicoara): Need to add double click.
+  int flags = 0;
+  switch (native_event->button.button) {
+    case ui::LEFT_BUTTON:
+      return flags | ui::EF_LEFT_MOUSE_BUTTON;
+    case ui::MIDDLE_BUTTON:
+      return flags | ui::EF_MIDDLE_MOUSE_BUTTON;
+    case ui::RIGHT_BUTTON:
+      return flags | ui::EF_RIGHT_MOUSE_BUTTON;
+  }
+  return flags;
+}
+
+}  // namespace
+
+namespace ui {
+
+EventType EventTypeFromNative(const base::NativeEvent& native_event) {
+  switch (native_event->type) {
+    case WAYLAND_BUTTON:
+      switch (native_event->button.button) {
+        case LEFT_BUTTON:
+        case RIGHT_BUTTON:
+        case MIDDLE_BUTTON:
+          return native_event->button.state ? ET_MOUSE_PRESSED
+                                            : ET_MOUSE_RELEASED;
+        case SCROLL_UP:
+        case SCROLL_DOWN:
+          return ET_MOUSEWHEEL;
+        default:
+          break;
+      }
+      break;
+    case WAYLAND_KEY:
+      return native_event->key.state ? ET_KEY_PRESSED : ET_KEY_RELEASED;
+    case WAYLAND_MOTION:
+      return ET_MOUSE_MOVED;
+    case WAYLAND_POINTER_FOCUS:
+      return native_event->pointer_focus.state ? ET_MOUSE_ENTERED
+                                               : ET_MOUSE_EXITED;
+    case WAYLAND_KEYBOARD_FOCUS:
+      return ET_UNKNOWN;
+    default:
+      break;
+  }
+  return ET_UNKNOWN;
+}
+
+int EventFlagsFromNative(const base::NativeEvent& native_event) {
+  switch (native_event->type) {
+    case WAYLAND_BUTTON:
+      return GetButtonEventFlagsFromNativeEvent(native_event) |
+             GetEventFlagsFromState(native_event->button.modifiers);
+    case WAYLAND_KEY:
+      return GetEventFlagsFromState(native_event->key.modifiers);
+    case WAYLAND_MOTION:
+      return GetEventFlagsFromState(native_event->motion.modifiers);
+    case WAYLAND_KEYBOARD_FOCUS:
+      return GetEventFlagsFromState(native_event->keyboard_focus.modifiers);
+    default:
+      return 0;
+  }
+}
+
+gfx::Point EventLocationFromNative(const base::NativeEvent& native_event) {
+  switch (native_event->type) {
+    case WAYLAND_BUTTON:
+      return gfx::Point(native_event->button.x, native_event->button.y);
+    case WAYLAND_MOTION:
+      return gfx::Point(native_event->motion.x, native_event->motion.y);
+    case WAYLAND_POINTER_FOCUS:
+      return gfx::Point(native_event->pointer_focus.x,
+                        native_event->pointer_focus.y);
+    default:
+      return gfx::Point();
+  }
+}
+
+KeyboardCode KeyboardCodeFromNative(const base::NativeEvent& native_event) {
+  return KeyboardCodeFromXKeysym(native_event->key.sym);
+}
+
+bool IsMouseEvent(const base::NativeEvent& native_event) {
+  return native_event->type == WAYLAND_BUTTON ||
+         native_event->type == WAYLAND_MOTION ||
+         native_event->type == WAYLAND_POINTER_FOCUS;
+}
+
+int GetChangedMouseButtonFlagsFromNative(
+    const base::NativeEvent& native_event) {
+  return 0;
+}
+
+gfx::Vector2d GetMouseWheelOffset(const base::NativeEvent& native_event) {
+
+  switch (native_event->button.button) {
+    case 4:
+      return gfx::Vector2d(0, kWheelScrollAmount);
+    case 5:
+      return gfx::Vector2d(0, -kWheelScrollAmount);
+    default:
+      // TODO(derat): Do something for horizontal scrolls (buttons 6 and 7)?
+      return gfx::Vector2d();
+  }
+}
+
+int GetTouchId(const base::NativeEvent& wev) {
+	return 0;
+}
+
+float GetTouchRadiusX(const base::NativeEvent& native_event) {
+	return 0.0;
+}
+
+float GetTouchRadiusY(const base::NativeEvent& native_event) {
+	return 0.0;
+}
+
+float GetTouchAngle(const base::NativeEvent& native_event) {
+	return 0.0;
+}
+
+float GetTouchForce(const base::NativeEvent& native_event) {
+	return 0.0;
+}
+
+bool GetScrollOffsets(const base::NativeEvent& native_event,
+                      float* x_offset,
+                      float* y_offset,
+                      float* x_offset_ordinal,
+                      float* y_offset_ordinal,
+                      int* finger_count) {
+	return false;
+}
+
+bool GetFlingData(const base::NativeEvent& native_event,
+                  float* vx,
+                  float* vy,
+                  float* vx_ordinal,
+                  float* vy_ordinal,
+                  bool* is_cancel) {
+	return false;
+}
+
+bool GetGestureTimes(const base::NativeEvent& native_event,
+                     double* start_time,
+                     double* end_time) {
+	return false;
+}
+
+base::TimeDelta EventTimeFromNative(const base::NativeEvent& native_event) {
+  return base::TimeDelta();
+}
+
+base::NativeEvent CreateNoopEvent() {
+	return NULL;
+}
+
+}  // namespace ui
diff --git a/ui/ui.gyp b/ui/ui.gyp
index f717490..c322142 100644
--- a/ui/ui.gyp
+++ b/ui/ui.gyp
@@ -341,6 +341,7 @@
         'base/ui_export.h',
         'base/view_prop.cc',
         'base/view_prop.h',
+        'base/wayland/events_wayland.cc',
         'base/win/accessibility_ids_win.h',
         'base/win/accessibility_misc_utils.cc',
         'base/win/accessibility_misc_utils.h',
-- 
1.7.9.5

