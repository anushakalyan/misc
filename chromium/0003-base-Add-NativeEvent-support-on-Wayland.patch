From 218a4a633c64e3b40362d9f4e4698b9b3daf9955 Mon Sep 17 00:00:00 2001
From: Tiago Vignatti <tiago.vignatti@intel.com>
Date: Fri, 18 May 2012 16:28:19 +0800
Subject: [PATCH 03/19] base: Add NativeEvent support on Wayland.

Signed-off-by: Tiago Vignatti <tiago.vignatti@intel.com>
---
 base/base.gypi               |    1 +
 base/event_types.h           |    8 +++
 base/wayland/wayland_event.h |  117 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 126 insertions(+)
 create mode 100644 base/wayland/wayland_event.h

diff --git a/base/base.gypi b/base/base.gypi
index 8fd844c..a73724e 100644
--- a/base/base.gypi
+++ b/base/base.gypi
@@ -582,6 +582,7 @@
           'nix/mime_util_xdg.h',
           'nix/xdg_util.cc',
           'nix/xdg_util.h',
+          'wayland/wayland_event.h',
           'win/enum_variant.cc',
           'win/enum_variant.h',
           'win/event_trace_consumer.h',
diff --git a/base/event_types.h b/base/event_types.h
index af586e4..2a69264 100644
--- a/base/event_types.h
+++ b/base/event_types.h
@@ -9,6 +9,12 @@
 
 #if defined(OS_WIN)
 #include <windows.h>
+#elif defined(USE_WAYLAND)
+namespace base {
+namespace wayland {
+union WaylandEvent;
+}
+}
 #elif defined(USE_X11)
 typedef union _XEvent XEvent;
 #elif defined(OS_MACOSX)
@@ -24,6 +30,8 @@ namespace base {
 // Cross platform typedefs for native event types.
 #if defined(OS_WIN)
 typedef MSG NativeEvent;
+#elif defined(USE_WAYLAND)
+typedef wayland::WaylandEvent* NativeEvent;
 #elif defined(USE_X11)
 typedef XEvent* NativeEvent;
 #elif defined(OS_MACOSX)
diff --git a/base/wayland/wayland_event.h b/base/wayland/wayland_event.h
new file mode 100644
index 0000000..c4e470e
--- /dev/null
+++ b/base/wayland/wayland_event.h
@@ -0,0 +1,117 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_WAYLAND_WAYLAND_EVENT_H_
+#define BASE_WAYLAND_WAYLAND_EVENT_H_
+
+#include <stdint.h>
+
+// Wayland event information is being passed in as arguments to the callbacks.
+// (See wayland_input_device.{h,cc} for information on the callbacks and how
+// events are processed.)
+// In order to provide a more generic look for events we wrap these arguments
+// in specific event structs. Then define a WaylandEvent as a union of all
+// types of events that Wayland will send.
+//
+// The following fields are common for most event types and their use is
+// similar:
+// - time:
+//    The time of the event. This should be monotonically increasing.
+// - state:
+//    The value of the button event as given by evdev. This is 0 if button
+//    isn't pressed.
+// - modifiers:
+//    Stores all the keyboard modifiers (Ctrl, Alt, Shift, ...) currently
+//    active. The modifiers are values as defined by xkbcommon.
+
+namespace base {
+namespace wayland {
+
+// Types of events Wayland will send
+enum WaylandEventType {
+  WAYLAND_BUTTON,
+  WAYLAND_KEY,
+  WAYLAND_MOTION,
+  WAYLAND_POINTER_FOCUS,
+  WAYLAND_KEYBOARD_FOCUS,
+  WAYLAND_GEOMETRY_CHANGE,
+};
+
+struct WaylandEventButton {
+  WaylandEventType type;
+  uint32_t time;
+  // WaylandEventButtonType defines some of the values button can take
+  uint32_t button;
+  uint32_t state;
+  uint32_t modifiers;
+  int32_t x;
+  int32_t y;
+};
+
+struct WaylandEventKey {
+  WaylandEventType type;
+  uint32_t time;
+  // The raw key value that evdev returns.
+  uint32_t key;
+  // The key symbol returned by processing the raw key using the xkbcommon
+  // library.
+  uint32_t sym;
+  uint32_t state;
+  uint32_t modifiers;
+};
+
+// Triggered when there is a motion event. The motion event is triggered
+// only if there is a window under focus.
+struct WaylandEventMotion {
+  WaylandEventType type;
+  uint32_t time;
+  uint32_t modifiers;
+  int32_t x;
+  int32_t y;
+};
+
+// Triggered when a window enters/exits pointer focus. The state tells us
+// if the window lost focus (state == 0) or gained focus (state != 0).
+struct WaylandEventPointerFocus {
+  WaylandEventType type;
+  uint32_t serial;
+  uint32_t state;
+  int32_t x;
+  int32_t y;
+};
+
+// Triggered when a window enters/exits keyboard focus. The state tells us
+// if the window lost focus (state == 0) or gained focus (state != 0).
+struct WaylandEventKeyboardFocus {
+  WaylandEventType type;
+  uint32_t serial;
+  uint32_t state;
+  uint32_t modifiers;
+};
+
+// Event triggered when a window's geometry changes. The event contains the
+// position and dimensions of the window.
+struct WaylandEventGeometryChange {
+  WaylandEventType type;
+  uint32_t time;
+  int32_t x;
+  int32_t y;
+  int32_t width;
+  int32_t height;
+};
+
+union WaylandEvent {
+  WaylandEventType            type;
+  WaylandEventButton          button;
+  WaylandEventKey             key;
+  WaylandEventMotion          motion;
+  WaylandEventPointerFocus    pointer_focus;
+  WaylandEventKeyboardFocus   keyboard_focus;
+  WaylandEventGeometryChange  geometry_change;
+};
+
+}  // namespace wayland
+}  // namespace base
+
+#endif  // BASE_WAYLAND_WAYLAND_EVENT_H_
-- 
1.7.9.5

