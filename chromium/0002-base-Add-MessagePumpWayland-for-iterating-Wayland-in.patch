From 98219f141ac9587a60a45793a3fd3fac5cbae1ec Mon Sep 17 00:00:00 2001
From: Tiago Vignatti <tiago.vignatti@intel.com>
Date: Fri, 18 May 2012 16:32:46 +0800
Subject: [PATCH 02/19] base: Add MessagePumpWayland for iterating Wayland in
 the message loop.

using Glib's.

Signed-off-by: Tiago Vignatti <tiago.vignatti@intel.com>
---
 base/base.gyp                             |   10 +++
 base/base.gypi                            |    7 ++
 base/message_loop/message_loop.h          |    8 +-
 base/message_loop/message_pump_wayland.cc |  139 +++++++++++++++++++++++++++++
 base/message_loop/message_pump_wayland.h  |  105 ++++++++++++++++++++++
 build/all.gyp                             |    5 ++
 ui/ui.gyp                                 |    9 ++
 ui/ui_unittests.gypi                      |    5 ++
 8 files changed, 286 insertions(+), 2 deletions(-)
 create mode 100644 base/message_loop/message_pump_wayland.cc
 create mode 100644 base/message_loop/message_pump_wayland.h

diff --git a/base/base.gyp b/base/base.gyp
index 85c9751..5388614 100644
--- a/base/base.gyp
+++ b/base/base.gyp
@@ -48,6 +48,14 @@
                 '../build/linux/system.gyp:gtk',
               ],
             }],
+            [ 'use_wayland==1', {
+              'dependencies': [
+                '../build/linux/system.gyp:wayland',
+              ],
+              'export_dependent_settings': [
+                '../build/linux/system.gyp:wayland',
+              ],
+            }],
           ],
           'dependencies': [
             'symbolize',
@@ -264,6 +272,8 @@
         'message_loop/message_pump_libevent.h',
         'message_loop/message_pump_mac.h',
         'message_loop/message_pump_mac.mm',
+        'message_loop/message_pump_wayland.cc',
+        'message_loop/message_pump_wayland.h',
         'metrics/field_trial.cc',
         'metrics/field_trial.h',
         'posix/file_descriptor_shuffle.cc',
diff --git a/base/base.gypi b/base/base.gypi
index 7bfd924..8fd844c 100644
--- a/base/base.gypi
+++ b/base/base.gypi
@@ -315,6 +315,8 @@
           'message_loop/message_pump_default.h',
           'message_loop/message_pump_ozone.cc',
           'message_loop/message_pump_ozone.h',
+          'message_loop/message_pump_wayland.cc',
+          'message_loop/message_pump_wayland.h',
           'message_loop/message_pump_win.cc',
           'message_loop/message_pump_win.h',
           'metrics/sample_map.cc',
@@ -815,6 +817,11 @@
               'message_loop/message_pump_aurax11.cc',
             ]
           }],
+          ['<(use_wayland) == 1', {
+            'sources!': [ 
+              'message_loop/message_pump_aurax11.cc',
+            ] 
+          }],
           ['OS == "linux" and >(nacl_untrusted_build)==0', {
             'sources!': [
               'files/file_path_watcher_kqueue.cc',
diff --git a/base/message_loop/message_loop.h b/base/message_loop/message_loop.h
index e765cef..45ee874 100644
--- a/base/message_loop/message_loop.h
+++ b/base/message_loop/message_loop.h
@@ -32,7 +32,9 @@
 #include "base/message_loop/message_pump_libevent.h"
 #if !defined(OS_MACOSX) && !defined(OS_ANDROID)
 
-#if defined(USE_AURA) && defined(USE_X11) && !defined(OS_NACL)
+#if defined(USE_WAYLAND)
+#include "base/message_loop/message_pump_wayland.h"
+#elif defined(USE_AURA) && defined(USE_X11) && !defined(OS_NACL)
 #include "base/message_loop/message_pump_aurax11.h"
 #elif defined(USE_OZONE) && !defined(OS_NACL)
 #include "base/message_loop/message_pump_ozone.h"
@@ -602,7 +604,9 @@ class BASE_EXPORT MessageLoopForUI : public MessageLoop {
 #endif
 
  protected:
-#if defined(USE_AURA) && defined(USE_X11) && !defined(OS_NACL)
+#if defined(USE_WAYLAND)
+  friend class base::MessagePumpWayland;
+#elif defined(USE_AURA) && defined(USE_X11) && !defined(OS_NACL)
   friend class MessagePumpAuraX11;
 #endif
 #if defined(USE_OZONE) && !defined(OS_NACL)
diff --git a/base/message_loop/message_pump_wayland.cc b/base/message_loop/message_pump_wayland.cc
new file mode 100644
index 0000000..fe53ac8
--- /dev/null
+++ b/base/message_loop/message_pump_wayland.cc
@@ -0,0 +1,139 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/message_loop/message_pump_wayland.h"
+#include "base/basictypes.h"
+#include "base/message_loop/message_loop.h"
+
+#include <wayland-client.h>
+#include "ui/wayland/wayland_display.h"
+
+namespace {
+
+WDisplay* g_wdisplay = NULL;
+
+}  // namespace
+
+namespace base {
+
+// static
+gboolean MessagePumpWayland::SourcePrepare(GSource* source, gint* timeout) {
+  *timeout = static_cast<WorkSource*>(source)->pump->HandlePrepare();
+  return FALSE;
+}
+
+// static
+gboolean MessagePumpWayland::SourceCheck(GSource* source) {
+  return static_cast<WorkSource*>(source)->pump->HandleCheck();
+}
+
+// static
+gboolean MessagePumpWayland::SourceDispatch(GSource* source,
+                                            GSourceFunc callback,
+                                            gpointer data) {
+  static_cast<WorkSource*>(source)->pump->HandleDispatch();
+  return TRUE;
+}
+
+int MessagePumpWayland::HandlePrepare() {
+	g_wdisplay->ProcessTasks();
+
+	wl_display_flush(g_wdisplay->display());
+  return -1;
+}
+
+bool MessagePumpWayland::HandleCheck() {
+	wl_display_flush(g_wdisplay->display());
+  return pfd_.revents;
+}
+
+void MessagePumpWayland::HandleDispatch() {
+  wl_display_dispatch(g_wdisplay->display());
+}
+
+MessagePumpWayland::MessagePumpWayland() : MessagePumpGlib(),
+	source_(NULL) {
+  InitWaylandSource();
+}
+
+MessagePumpWayland::~MessagePumpWayland() {
+  g_source_destroy(source_);
+  g_source_unref(source_);
+  //delete g_wdisplay;
+  //g_wdisplay = NULL;
+}
+
+// static
+WDisplay* MessagePumpWayland::GetDefaultWaylandDisplay() {
+	g_wdisplay = ui::WaylandDisplay::GetDisplay();
+	return g_wdisplay;
+}
+
+// static
+MessagePumpWayland* MessagePumpWayland::Current() {
+  MessageLoopForUI* loop = MessageLoopForUI::current();
+  return static_cast<MessagePumpWayland*>(loop->pump_ui());
+}
+
+void MessagePumpWayland::AddDispatcherForWindow(
+    MessagePumpDispatcher* dispatcher,
+    ui::WaylandWindow *window) {
+  dispatchers_.insert(std::make_pair(window, dispatcher));
+}
+
+void MessagePumpWayland::RemoveDispatcherForWindow(ui::WaylandWindow *window) {
+  dispatchers_.erase(window);
+}
+
+void MessagePumpWayland::AddDispatcherForRootWindow(
+    MessagePumpDispatcher* dispatcher) {
+  DCHECK(std::find(root_window_dispatchers_.begin(),
+                   root_window_dispatchers_.end(),
+                   dispatcher) ==
+         root_window_dispatchers_.end());
+  root_window_dispatchers_.push_back(dispatcher);
+}
+
+void MessagePumpWayland::RemoveDispatcherForRootWindow(
+    MessagePumpDispatcher* dispatcher) {
+  root_window_dispatchers_.erase(
+      std::remove(root_window_dispatchers_.begin(),
+                  root_window_dispatchers_.end(),
+                  dispatcher));
+}
+
+void MessagePumpWayland::InitWaylandSource() {
+  DCHECK(!source_);
+
+  static GSourceFuncs kSourceHandlers = {
+    MessagePumpWayland::SourcePrepare,
+    MessagePumpWayland::SourceCheck,
+    MessagePumpWayland::SourceDispatch,
+    NULL
+  };
+
+	WDisplay* display = GetDefaultWaylandDisplay();
+  DCHECK(display) << "Unable to get connection to Wayland server";
+  source_ = static_cast<WorkSource*>(
+      g_source_new(&kSourceHandlers, sizeof(WorkSource)));
+  source_->pump = this;
+  pfd_.fd = wl_display_get_fd(display->display());
+  pfd_.events = G_IO_IN | G_IO_ERR;
+  g_source_add_poll(source_, &pfd_);
+  g_source_set_can_recurse(source_, TRUE);
+  g_source_set_callback(source_, NULL, this, NULL);
+  g_source_attach(source_, g_main_context_default());
+}
+
+MessagePumpDispatcher* MessagePumpWayland::GetDispatcherForWaylandEvent(
+    base::wayland::WaylandEvent* wev) const {
+  return NULL;
+}
+
+bool MessagePumpWayland::Dispatch(const base::NativeEvent& wev) {
+  MessageLoop::Dispatcher* dispatcher = GetDispatcherForWaylandEvent(wev);
+  return dispatcher ? dispatcher->Dispatch(wev) : true;
+}
+
+}  // namespace base
diff --git a/base/message_loop/message_pump_wayland.h b/base/message_loop/message_pump_wayland.h
new file mode 100644
index 0000000..e894b05
--- /dev/null
+++ b/base/message_loop/message_pump_wayland.h
@@ -0,0 +1,105 @@
+// Copyright (c) 2011 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_MESSAGE_PUMP_WAYLAND_H_
+#define BASE_MESSAGE_PUMP_WAYLAND_H_
+#pragma once
+
+#include "base/memory/scoped_ptr.h"
+#include "base/message_loop/message_pump.h"
+#include "base/message_loop/message_pump_glib.h"
+#include "base/message_loop/message_pump_dispatcher.h"
+#include "base/message_loop/message_pump_observer.h"
+
+#include <bitset>
+#include <map>
+#include <vector>
+
+#include <glib.h>
+
+namespace ui {
+class WaylandDisplay;
+class WaylandWindow;
+}
+typedef ui::WaylandDisplay WDisplay;
+
+namespace base {
+
+namespace wayland {
+union WaylandEvent;
+}
+
+// This class implements a message-pump for dispatching Wayland events.
+class BASE_EXPORT MessagePumpWayland : public MessagePumpGlib,
+                                       public MessagePumpDispatcher {
+ public:
+  MessagePumpWayland();
+  virtual ~MessagePumpWayland();
+
+  // Returns default Wayland Display.
+  static WDisplay* GetDefaultWaylandDisplay();
+
+  // Returns the UI message pump.
+  static MessagePumpWayland* Current();
+
+  void AddDispatcherForWindow(MessagePumpDispatcher* dispatcher,
+                              ui::WaylandWindow *window);
+  void RemoveDispatcherForWindow(ui::WaylandWindow *window);
+
+  void AddDispatcherForRootWindow(MessagePumpDispatcher* dispatcher);
+  void RemoveDispatcherForRootWindow(MessagePumpDispatcher* dispatcher);
+
+ protected:
+  // These are used to process the pump callbacks.
+  // HandlePrepare: is called during glib's prepare step and returns a timeout
+  //                that will be passed to the poll.
+  // HandleCheck:   called after HandlePrepare and returns whether
+  //                HandleDispatch should be called.
+  // HandleDispatch:is called after HandleCheck returns true and it will
+  //                dispatch a Wayland event.
+  virtual int HandlePrepare();
+  virtual bool HandleCheck();
+  virtual void HandleDispatch();
+
+ private:
+  typedef std::map<ui::WaylandWindow*, MessagePumpDispatcher*> DispatchersMap;
+  typedef std::vector<MessagePumpDispatcher*> Dispatchers;
+
+  struct WorkSource : public GSource {
+    MessagePumpWayland* pump;
+  };
+
+  // Initializes the glib event source for Wayland.
+  void InitWaylandSource();
+
+  // Actual callbacks for glib. These functions will just call the appropriate
+  // Handle* functions in a MessagePumpWayland object.
+  static gboolean SourcePrepare(GSource* source, gint* timeout);
+  static gboolean SourceCheck(GSource* source);
+  static gboolean SourceDispatch(GSource* source,
+                                 GSourceFunc callback,
+                                 gpointer data);
+
+  // Returns the Dispatcher based on the event's target window.
+  MessagePumpDispatcher* GetDispatcherForWaylandEvent(
+      base::wayland::WaylandEvent* wev) const;
+
+  // Overridden from MessagePumpDispatcher:
+  virtual bool Dispatch(const base::NativeEvent& wev) OVERRIDE;
+
+  // The event source for Wayland events.
+  WorkSource* source_;
+  GPollFD pfd_;
+
+  DispatchersMap dispatchers_;
+  Dispatchers root_window_dispatchers_;
+
+  DISALLOW_COPY_AND_ASSIGN(MessagePumpWayland);
+};
+
+typedef MessagePumpWayland MessagePumpForUI;
+
+}  // namespace base
+
+#endif  // BASE_MESSAGE_PUMP_WAYLAND_H_
diff --git a/build/all.gyp b/build/all.gyp
index d37abff..699ea96 100644
--- a/build/all.gyp
+++ b/build/all.gyp
@@ -123,6 +123,11 @@
             '../tools/gtk_clipboard_dump/gtk_clipboard_dump.gyp:*',
           ],
         }],
+        ['use_wayland == 1', {
+          'dependencies': [
+            '../ui/wayland/wayland.gyp:*',
+          ],
+        }],
         ['OS=="win"', {
           'conditions': [
             ['win_use_allocator_shim==1', {
diff --git a/ui/ui.gyp b/ui/ui.gyp
index 00e0954..f717490 100644
--- a/ui/ui.gyp
+++ b/ui/ui.gyp
@@ -685,6 +685,15 @@
             ['exclude', 'base/dragdrop/drag_utils_aura.cc'],
           ],
         }],
+        ['use_wayland==1', {
+          'sources/': [
+            ['exclude', 'base/x/*'],
+            ['exclude', 'base/cursor/cursor_x11.cc'],
+            ['exclude', 'base/clipboard/clipboard_aurax11.cc'],
+            ['exclude', 'base/keycodes/keyboard_code_conversion_x.*'],
+            ['exclude', 'base/touch/touch_factory_x11.*'],
+          ],
+        }],
         ['use_aura==0 and toolkit_views==0', {
           'sources/': [
             ['exclude', '^base/gestures/*'],
diff --git a/ui/ui_unittests.gypi b/ui/ui_unittests.gypi
index 53b54a8..0fde205 100644
--- a/ui/ui_unittests.gypi
+++ b/ui/ui_unittests.gypi
@@ -276,6 +276,11 @@
             '../tools/xdisplaycheck/xdisplaycheck.gyp:xdisplaycheck',
           ],
         }],
+        ['use_wayland==1', {
+          'dependencies': [
+            './wayland/wayland.gyp:wayland',
+          ],
+        }],
         ['toolkit_uses_gtk == 1', {
           'sources': [
             'base/dragdrop/gtk_dnd_util_unittest.cc',
-- 
1.7.9.5

