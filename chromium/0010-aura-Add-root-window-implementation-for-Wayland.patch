From 5c1357278f97a9ee2606733ad7e680f98fdbff83 Mon Sep 17 00:00:00 2001
From: Tiago Vignatti <tiago.vignatti@intel.com>
Date: Fri, 3 May 2013 16:41:25 -0300
Subject: [PATCH 10/19] aura: Add root window implementation for Wayland

Signed-off-by: Tiago Vignatti <tiago.vignatti@intel.com>
---
 ui/aura/aura.gyp                    |    7 +
 ui/aura/env.cc                      |    2 +-
 ui/aura/root_window_host_wayland.cc |  286 +++++++++++++++++++++++++++++++++++
 ui/aura/root_window_host_wayland.h  |  124 +++++++++++++++
 4 files changed, 418 insertions(+), 1 deletion(-)
 create mode 100644 ui/aura/root_window_host_wayland.cc
 create mode 100644 ui/aura/root_window_host_wayland.h

diff --git a/ui/aura/aura.gyp b/ui/aura/aura.gyp
index 7915d09..146a8b7 100644
--- a/ui/aura/aura.gyp
+++ b/ui/aura/aura.gyp
@@ -87,6 +87,8 @@
         'root_window_host_mac.mm',
         'root_window_host_ozone.cc',
         'root_window_host_ozone.h',
+        'root_window_host_wayland.cc',
+        'root_window_host_wayland.h',
         'root_window_host_win.cc',
         'root_window_host_win.h',
         'root_window_host_x11.cc',
@@ -124,6 +126,11 @@
             ],
           },
         }],
+        ['use_wayland==1', {
+          'dependencies': [
+            '../wayland/wayland.gyp:wayland',
+          ],
+        }],
         ['OS=="win"', {
           'dependencies': [
             '../metro_viewer/metro_viewer.gyp:metro_viewer_messages',
diff --git a/ui/aura/env.cc b/ui/aura/env.cc
index 9b1e214..05ac199 100644
--- a/ui/aura/env.cc
+++ b/ui/aura/env.cc
@@ -82,7 +82,7 @@ void Env::RootWindowActivated(RootWindow* root_window) {
 // Env, private:
 
 void Env::Init() {
-#if !defined(USE_X11) && !defined(USE_OZONE)
+#if !defined(USE_X11) && !defined(USE_OZONE) && !defined(USE_WAYLAND)
   dispatcher_.reset(CreateDispatcher());
 #endif
 #if defined(USE_X11)
diff --git a/ui/aura/root_window_host_wayland.cc b/ui/aura/root_window_host_wayland.cc
new file mode 100644
index 0000000..4747454
--- /dev/null
+++ b/ui/aura/root_window_host_wayland.cc
@@ -0,0 +1,286 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/aura/root_window_host_wayland.h"
+
+#include <strings.h>
+
+#include <algorithm>
+#include <limits>
+#include <string>
+
+#include "base/wayland/wayland_event.h"
+#include "ui/wayland/wayland_screen.h"
+#include "base/command_line.h"
+#include "base/message_loop/message_loop.h"
+#include "base/message_loop/message_pump_wayland.h"
+#include "base/stl_util.h"
+#include "base/string_util.h"
+#include "base/stringprintf.h"
+#include "ui/aura/client/capture_client.h"
+#include "ui/aura/client/cursor_client.h"
+#include "ui/aura/client/screen_position_client.h"
+#include "ui/aura/client/user_action_client.h"
+#include "ui/aura/env.h"
+#include "ui/aura/root_window.h"
+#include "ui/base/cursor/cursor.h"
+#include "ui/base/events/event.h"
+#include "ui/base/events/event_utils.h"
+#include "ui/base/keycodes/keyboard_codes.h"
+#include "ui/base/touch/touch_factory_x11.h"
+#include "ui/base/ui_base_switches.h"
+#include "ui/base/view_prop.h"
+#include "ui/compositor/dip_util.h"
+#include "ui/compositor/layer.h"
+#include "ui/gfx/codec/png_codec.h"
+#include "ui/gfx/screen.h"
+
+#if defined(OS_CHROMEOS)
+#include "base/chromeos/chromeos_version.h"
+#endif
+
+using std::max;
+using std::min;
+
+namespace aura {
+
+////////////////////////////////////////////////////////////////////////////////
+// RootWindowHostWayland
+
+RootWindowHostWayland::RootWindowHostWayland(const gfx::Rect& bounds)
+    : delegate_(NULL),
+      display_(ui::WaylandDisplay::GetDisplay()),
+      current_cursor_(ui::kCursorNull),
+      bounds_(bounds),
+      focus_when_shown_(false) {
+
+  window_ = new ui::WaylandWindow(NULL, display_);
+  window_->SetParentWindow(NULL);
+  window_->SetBounds(bounds_);
+
+  base::MessagePumpWayland::Current()->AddDispatcherForWindow(this, window_);
+  base::MessagePumpWayland::Current()->AddDispatcherForRootWindow(this);
+
+  Env::GetInstance()->AddObserver(this);
+}
+
+RootWindowHostWayland::~RootWindowHostWayland() {
+  Env::GetInstance()->RemoveObserver(this);
+  base::MessagePumpWayland::Current()->RemoveDispatcherForRootWindow(this);
+  base::MessagePumpWayland::Current()->RemoveDispatcherForWindow(window_);
+
+  delete window_;
+}
+
+bool RootWindowHostWayland::Dispatch(const base::NativeEvent& event) {
+  return true;
+}
+
+void RootWindowHostWayland::SetDelegate(RootWindowHostDelegate* delegate) {
+  delegate_ = delegate;
+}
+
+RootWindow* RootWindowHostWayland::GetRootWindow() {
+  return delegate_->AsRootWindow();
+}
+
+gfx::AcceleratedWidget RootWindowHostWayland::GetAcceleratedWidget() {
+  return window_;
+}
+
+void RootWindowHostWayland::Show() {
+  window_->ScheduleRedraw();
+}
+
+void RootWindowHostWayland::Hide() {
+}
+
+void RootWindowHostWayland::ToggleFullScreen() {
+  NOTIMPLEMENTED();
+}
+
+gfx::Rect RootWindowHostWayland::GetBounds() const {
+  return bounds_;
+}
+
+void RootWindowHostWayland::SetBounds(const gfx::Rect& bounds) {
+  // Even if the host window's size doesn't change, aura's root window
+  // size, which is in DIP, changes when the scale changes.
+  float current_scale = delegate_->GetDeviceScaleFactor();
+  float new_scale = gfx::Screen::GetScreenFor(delegate_->AsRootWindow())->
+      GetDisplayNearestWindow(delegate_->AsRootWindow()).device_scale_factor();
+  bool origin_changed = bounds_.origin() != bounds.origin();
+  bool size_changed = bounds_.size() != bounds.size();
+
+  // Assume that the resize will go through as requested, which should be the
+  // case if we're running without a window manager.  If there's a window
+  // manager, it can modify or ignore the request, but (per ICCCM) we'll get a
+  // (possibly synthetic) ConfigureNotify about the actual size and correct
+  // |bounds_| later.
+  bounds_ = bounds;
+  UpdateIsInternalDisplay();
+  if (origin_changed)
+    delegate_->OnHostMoved(bounds.origin());
+  if (size_changed || current_scale != new_scale) {
+    delegate_->OnHostResized(bounds.size());
+  } else {
+    delegate_->AsRootWindow()->SchedulePaintInRect(
+        delegate_->AsRootWindow()->bounds());
+  }
+
+  window_->SetBounds(bounds_);
+}
+
+gfx::Insets RootWindowHostWayland::GetInsets() const {
+  return insets_;
+}
+
+void RootWindowHostWayland::SetInsets(const gfx::Insets& insets) {
+  insets_ = insets;
+}
+
+gfx::Point RootWindowHostWayland::GetLocationOnNativeScreen() const {
+  return bounds_.origin();
+}
+
+void RootWindowHostWayland::SetCapture() {
+  // TODO(oshima): Grab x input.
+}
+
+void RootWindowHostWayland::ReleaseCapture() {
+  // TODO(oshima): Release x input.
+}
+
+void RootWindowHostWayland::SetCursor(gfx::NativeCursor cursor) {
+  if (cursor == current_cursor_)
+    return;
+  current_cursor_ = cursor;
+  SetCursorInternal(cursor);
+}
+
+bool RootWindowHostWayland::QueryMouseLocation(gfx::Point* location_return) {
+  return false;
+}
+
+bool RootWindowHostWayland::ConfineCursorToRootWindow() {
+  return true;
+}
+
+void RootWindowHostWayland::UnConfineCursor() {
+}
+
+void RootWindowHostWayland::OnCursorVisibilityChanged(bool show) {
+}
+
+void RootWindowHostWayland::MoveCursorTo(const gfx::Point& location) {
+}
+
+void RootWindowHostWayland::SetFocusWhenShown(bool focus_when_shown) {
+}
+
+bool RootWindowHostWayland::CopyAreaToSkCanvas(const gfx::Rect& source_bounds,
+                                               const gfx::Point& dest_offset,
+                                               SkCanvas* canvas) {
+  NOTIMPLEMENTED();
+  return false;
+}
+
+bool RootWindowHostWayland::GrabSnapshot(
+    const gfx::Rect& snapshot_bounds,
+    std::vector<unsigned char>* png_representation) {
+  return false;
+}
+
+void RootWindowHostWayland::PostNativeEvent(
+    const base::NativeEvent& native_event) {
+  DCHECK(window_);
+  DCHECK(display_);
+
+  NOTIMPLEMENTED();
+}
+
+void RootWindowHostWayland::OnDeviceScaleFactorChanged(
+    float device_scale_factor) {
+}
+
+void RootWindowHostWayland::PrepareForShutdown() {
+  base::MessagePumpWayland::Current()->RemoveDispatcherForWindow(window_);
+}
+
+void RootWindowHostWayland::OnWindowInitialized(Window* window) {
+}
+
+void RootWindowHostWayland::OnRootWindowInitialized(RootWindow* root_window) {
+  // UpdateIsInternalDisplay relies on:
+  // 1. delegate_ pointing to RootWindow - available after SetDelegate.
+  // 2. RootWindow's kDisplayIdKey property set - available by the time
+  //    RootWindow::Init is called.
+  //    (set in DisplayManager::CreateRootWindowForDisplay)
+  // Ready when NotifyRootWindowInitialized is called from RootWindow::Init.
+  if (!delegate_ || root_window != GetRootWindow())
+    return;
+  UpdateIsInternalDisplay();
+}
+
+bool RootWindowHostWayland::DispatchEventForRootWindow(
+    const base::NativeEvent& event) {
+  NOTIMPLEMENTED();
+
+  return true;
+}
+
+bool RootWindowHostWayland::IsWindowManagerPresent() {
+  return true;
+}
+
+void RootWindowHostWayland::SetCursorInternal(gfx::NativeCursor cursor) {
+}
+
+void RootWindowHostWayland::TranslateAndDispatchMouseEvent(
+    ui::MouseEvent* event) {
+  RootWindow* root_window = GetRootWindow();
+  client::ScreenPositionClient* screen_position_client =
+      GetScreenPositionClient(root_window);
+  gfx::Rect local(bounds_.size());
+
+  if (screen_position_client && !local.Contains(event->location())) {
+    gfx::Point location(event->location());
+    // In order to get the correct point in screen coordinates
+    // during passive grab, we first need to find on which host window
+    // the mouse is on, and find out the screen coordinates on that
+    // host window, then convert it back to this host window's coordinate.
+    screen_position_client->ConvertHostPointToScreen(root_window, &location);
+    screen_position_client->ConvertPointFromScreen(root_window, &location);
+    root_window->ConvertPointToHost(&location);
+    event->set_location(location);
+    event->set_root_location(location);
+  }
+  delegate_->OnHostMouseEvent(event);
+}
+
+void RootWindowHostWayland::UpdateIsInternalDisplay() {
+  RootWindow* root_window = GetRootWindow();
+  gfx::Screen* screen = gfx::Screen::GetScreenFor(root_window);
+  gfx::Display display = screen->GetDisplayNearestWindow(root_window);
+  is_internal_display_ = display.IsInternal();
+}
+
+// static
+RootWindowHost* RootWindowHost::Create(const gfx::Rect& bounds) {
+  return new RootWindowHostWayland(bounds);
+}
+
+// static
+gfx::Size RootWindowHost::GetNativeScreenSize() {
+  ui::WaylandDisplay *d = base::MessagePumpWayland::GetDefaultWaylandDisplay();
+  std::list<ui::WaylandScreen*> list = d->GetScreenList();
+
+  if(list.size() < 1)
+    return gfx::Size();
+
+  ui::WaylandScreen *screen = list.front();
+  return screen->GetAllocation().size();
+}
+
+}  // namespace aura
diff --git a/ui/aura/root_window_host_wayland.h b/ui/aura/root_window_host_wayland.h
new file mode 100644
index 0000000..745ab5d
--- /dev/null
+++ b/ui/aura/root_window_host_wayland.h
@@ -0,0 +1,124 @@
+// Copyright 2013 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_AURA_ROOT_WINDOW_HOST_WAYLAND_H_
+#define UI_AURA_ROOT_WINDOW_HOST_WAYLAND_H_
+
+#include <vector>
+
+#include "base/memory/scoped_ptr.h"
+#include "base/message_loop.h"
+#include "ui/aura/env_observer.h"
+#include "ui/aura/root_window_host.h"
+#include "ui/gfx/insets.h"
+#include "ui/gfx/rect.h"
+#include "ui/wayland/wayland_display.h"
+#include "ui/wayland/wayland_window.h"
+
+namespace base {
+namespace wayland {
+union WaylandEvent;
+}
+}
+
+namespace ui {
+class MouseEvent;
+}
+
+namespace aura {
+
+class RootWindowHostWayland : public RootWindowHost,
+                              public base::MessageLoop::Dispatcher,
+                              public EnvObserver {
+ public:
+  explicit RootWindowHostWayland(const gfx::Rect& bounds);
+  virtual ~RootWindowHostWayland();
+
+  // Overridden from Dispatcher overrides:
+  virtual bool Dispatch(const base::NativeEvent& event) OVERRIDE;
+
+  // RootWindowHost Overrides.
+  virtual void SetDelegate(RootWindowHostDelegate* delegate) OVERRIDE;
+  virtual RootWindow* GetRootWindow() OVERRIDE;
+  virtual gfx::AcceleratedWidget GetAcceleratedWidget() OVERRIDE;
+  virtual void Show() OVERRIDE;
+  virtual void Hide() OVERRIDE;
+  virtual void ToggleFullScreen() OVERRIDE;
+  virtual gfx::Rect GetBounds() const OVERRIDE;
+  virtual void SetBounds(const gfx::Rect& bounds) OVERRIDE;
+  virtual gfx::Insets GetInsets() const OVERRIDE;
+  virtual void SetInsets(const gfx::Insets& insets) OVERRIDE;
+  virtual gfx::Point GetLocationOnNativeScreen() const OVERRIDE;
+  virtual void SetCapture() OVERRIDE;
+  virtual void ReleaseCapture() OVERRIDE;
+  virtual void SetCursor(gfx::NativeCursor cursor_type) OVERRIDE;
+  virtual bool QueryMouseLocation(gfx::Point* location_return) OVERRIDE;
+  virtual bool ConfineCursorToRootWindow() OVERRIDE;
+  virtual void UnConfineCursor() OVERRIDE;
+  virtual void OnCursorVisibilityChanged(bool show) OVERRIDE;
+  virtual void MoveCursorTo(const gfx::Point& location) OVERRIDE;
+  virtual void SetFocusWhenShown(bool focus_when_shown) OVERRIDE;
+  virtual bool CopyAreaToSkCanvas(const gfx::Rect& source_bounds,
+                                  const gfx::Point& dest_offset,
+                                  SkCanvas* canvas) OVERRIDE;
+  virtual bool GrabSnapshot(
+      const gfx::Rect& snapshot_bounds,
+      std::vector<unsigned char>* png_representation) OVERRIDE;
+  virtual void PostNativeEvent(const base::NativeEvent& event) OVERRIDE;
+  virtual void OnDeviceScaleFactorChanged(float device_scale_factor) OVERRIDE;
+  virtual void PrepareForShutdown() OVERRIDE;
+
+  // EnvObserver overrides.
+  virtual void OnWindowInitialized(Window* window) OVERRIDE;
+  virtual void OnRootWindowInitialized(RootWindow* root_window) OVERRIDE;
+ private:
+
+  bool DispatchEventForRootWindow(const base::NativeEvent& event);
+
+  // Returns true if there's an X window manager present... in most cases.  Some
+  // window managers (notably, ion3) don't implement enough of ICCCM for us to
+  // detect that they're there.
+  bool IsWindowManagerPresent();
+
+  // Sets the cursor on |xwindow_| to |cursor|.  Does not check or update
+  // |current_cursor_|.
+  void SetCursorInternal(gfx::NativeCursor cursor);
+
+  // Translates the native mouse location into screen coordinates and and
+  // dispatches the event to RootWindowHostDelegate.
+  void TranslateAndDispatchMouseEvent(ui::MouseEvent* event);
+
+  // Update is_internal_display_ based on delegate_ state
+  void UpdateIsInternalDisplay();
+
+  RootWindowHostDelegate* delegate_;
+
+  // The display and the native window hosting the root window.
+  ui::WaylandDisplay* display_;
+  ui::WaylandWindow* window_;
+
+  // Current Aura cursor.
+  gfx::NativeCursor current_cursor_;
+
+  // Is the window mapped to the screen?
+  bool window_mapped_;
+
+  // The bounds of |xwindow_|.
+  gfx::Rect bounds_;
+
+  // The insets that specifies the effective area within the |window_|.
+  gfx::Insets insets_;
+
+  // True if the root host resides on the internal display
+  bool is_internal_display_;
+
+  // True if the window should be focused when the window is shown.
+  bool focus_when_shown_;
+
+  DISALLOW_COPY_AND_ASSIGN(RootWindowHostWayland);
+};
+
+}  // namespace aura
+
+#endif  // UI_AURA_ROOT_WINDOW_HOST_WAYLAND_H_
-- 
1.7.9.5

